const { flags } = require("./cli")
const { getErrorCode } = require("./errors")


const extractPageData = (parsedUrl, record) => ({
     title: record && record.page.title,
     description: record && record.page.description,
     bodyText: record && record.page.bodyText,
     textLength: record && record.page.textLength,
     isParked: record && record.page.isParked(parsedUrl.hostname, record.finalUrl),
     iscPanel: record && record.page.iscPanel(),
     isAutoGenerated: record && record.page.isAutoGenerated(),
})

const formatError = (error) => ({
     _error_name: error && error.name,
     _error_code: error && getErrorCode(error),
     _error_message: error && error.message,
     _error: error && String(error),
});

const NOT_WORKING_ERRORS = new Set([
     'ENOTFOUND',
     'net::ERR_ADDRESS_UNREACHABLE',
     'net::ERR_CONNECTION_RESET',
     'net::ERR_SSL_VERSION_OR_CIPHER_MISMATCH',
     'net::ERR_EMPTY_RESPONSE',
     'net::ERR_CONNECTION_CLOSED',
])

const errorResult = (error) => {
     const errCode = getErrorCode(error)
     if(NOT_WORKING_ERRORS.has(errCode))
          return 'NOT_WORKING'
     else
          return 'TOBE_RETESTED'
}

const recordResult = ({
     parsedUrl,
     record,
}) => {
     if(String(record.finalUrl).includes('chrome-error://'))
          return 'TOBE_RETESTED'
     
     if(record.status && Number(record.status) == 404) 
          return 'NOT_WORKING'
     const page = record.page;
     if(page.isParked(parsedUrl.hostname, record.finalUrl) 
     || page.iscPanel() 
     || page.isNotWorking(parsedUrl.hostname)) 
          return 'NOT_WORKING'

     return ''
}

const formatRecord = ({
     id, 
     numberOfTests, 
     parsedUrl, 
     record,
     wbSnapshot,
     error, 
     lastChecked
}) => {

     let result = {};
     result[flags.keyC] = id;
     result[flags.addrC] = String(parsedUrl);
     result[flags.notC] = numberOfTests;
    
     result.status = record && record.status
     result.finalUrl = (wbSnapshot && wbSnapshot.redirect) || (record && record.finalUrl)
     result.usesHTTPS = result.finalUrl && String(result.finalUrl).includes('https:')

     const pageR = wbSnapshot ? wbSnapshot : record
     
     result = {
          ...result,
          ...extractPageData(parsedUrl, pageR),
     }
     
     result._cloudflareChallenge = record && record.cloudflareChallenge,
     result._blocked = record && record.blocked
     result._isWaybackSnap = Boolean(wbSnapshot)
     result._waybackSnap_date = wbSnapshot && wbSnapshot.date
     result._waybackSnap_url = wbSnapshot && String(wbSnapshot.url)
     result._waybackSnap_finalUrl = wbSnapshot && String(wbSnapshot.finalUrl)
     result._waybackSnap_status = wbSnapshot && wbSnapshot.status


     result = {
          ...result,
          ...formatError(error),
          lastChecked
     }
     
     result.result = error 
          ? errorResult(error)
          : recordResult({parsedUrl, record: pageR})

     return result
}

module.exports = {
     formatRecord
}