const cheerio = require('cheerio')
const { 
	parkedKeywords, 
	cPanelPageKeywords,
    bodyTextKeywords,
    titleKeywords,
} = require('./keywords')

class Page {
    
    constructor(content) {
        this.$ = cheerio.load(content)
    }

    _clean(longstr) {
        if(!longstr) return longstr

        return longstr.
            split(/\t|\n/g).
            filter(w => w && w!=' ').
            map(chunk => {
                return chunk.
                    trim().
                    split(' ').
                    filter(w => w).
                    join(' ')
            }).
            join('|').
            replaceAll(/[=\|=]{1,}/g, ' | ').
            trim()

    }

    get bodyText() {
        const $ = this.$;
        const bodyText = $('body').prop('innerText')
        return this._clean(bodyText)
    }

    get title() {
        const $ = this.$
        const title = $('title').text() 
            || $('meta[property="og:title"]').attr("content")
            || "";
        return this._clean(title)
    }
    
    get description() {
        const $ = this.$
        const desc = $('meta[property="og:description"]').attr("content")
            || $('meta[name="description"]').attr("content")
            || "";
        return this._clean(desc) 
    }

    get textContent() {
        return [this.title, this.description, this.bodyText].join(' ')
    }

    get textLength() {
        return this.textContent.length
    }

    isParked(hostname, finalUrl) {
        const hostnameParts = hostname.split('.')
        const domainName = hostnameParts.length > 2 
            ? hostnameParts.slice(1).join('.') 
            : hostname
        if(
            finalUrl.href.includes('domain') && 
            (finalUrl.pathname+finalUrl.search).includes(domainName)
        ) {
            return true
        }

        const dynamicKeywords = [
            new RegExp(`${domainName}( domain name){0,1} is [\w+ ]{0,}for (sale|purchase)`, 'ig'),
            new RegExp(`${domainName} is almost here`, 'ig'),
            new RegExp(`registration of ${domainName}`, 'ig'),
            new RegExp(`domain ${domainName} (is|maybe)? for (sale|purchase)`, 'ig'),
            new RegExp(`${domainName} - BlueHost.com`, 'ig'),
        ]

        return this.includesAny([
            ...dynamicKeywords, 
            ...parkedKeywords
        ])
    }

    isAutoGenerated() {
        let rgx = new RegExp('default page', 'i')
        return rgx.test(this.title) || this.includesAny([
                new RegExp('generated by wordfence', 'ig'),
                new RegExp('this page (is|was) (auto)?generated by', 'i'),
                "You see this page because there is no Web site at this address",
            ])
    }

    iscPanel() {
        return this.includesAny(cPanelPageKeywords)
    }

    forbidden() {
        return this.includesAny([
            'ERR_BLOCKED_BY_RESPONSE',
            'website is using a security service to protect itself',
            'you have been blocked',
            "you do not have access to this page",
            'you are not allowed to access this page',
        ]) || new RegExp('challenge validation', 'i').test(this.title)
    }

    isNotWorking(hostname) {
        for(let keyword of titleKeywords){
            if (new RegExp(keyword, 'ig').test(this.title)) 
                return true
        }
        
        for(let keyword of bodyTextKeywords){
            if (new RegExp(keyword, 'ig').test(this.bodyText)) 
                return true
        }
        
        return this.textLength == 0
    }

    includes(keyword) {
        return new RegExp(keyword, 'gi').test(this.textContent)
    }

    includesAny(keywords) {
        for (let keyword of keywords) {
            if (this.includes(keyword)) return true
        }
        return false
    }
}


module.exports = {
    Page
}